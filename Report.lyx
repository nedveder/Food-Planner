#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass IEEEtran
\begin_preamble
% for subfigures/subtables
\usepackage[caption=false,font=footnotesize]{subfig}
\end_preamble
\options journal
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\float_placement tbh
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Your Title"
\pdf_author "Your Name"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Introduction to AI Final Project - Meal Planner
\end_layout

\begin_layout Author
Nadav Lederman (ID: 208585760), Mor Ben Ami (ID: 209789924), Daniel Gibor
 (Bogatyrevich) (ID: 334065281)
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This project addresses the critical challenge of optimizing food inventory
 management in kitchens through AI-driven planning techniques.
 Our goal is to minimizing food waste while creating a flexible platform
 to maximize personal tase, preparation time and shelf time.
\end_layout

\begin_layout Standard
Food waste is a pressing global issue, with up to 40% of food in the United
 States going uneaten.
 A significant portion of this waste occurs in homes and restaurants, largely
 due to ineffective inventory management and meal planning.
 By developing an intelligent system that optimizes ingredient usage, we
 aim to reduce waste, save costs, and lessen the environmental impact of
 food disposal.
\end_layout

\begin_layout Standard
To navigate the complex decision-making involved in meal preparation and
 inventory management, we model the problem as a state space search, where
 each state reflects the current inventory and meal plan.
 Actions, in this context, are recipe selections that transform the state
 by consuming ingredients and adding meals to the plan.
 The goal is to find a sequence of actions that optimizes meal planning
 based on our evaluation criteria.
\begin_inset Newline newline
\end_inset

To solve this optimization problem, we implement and compare several algorithms:
\end_layout

\begin_layout Itemize
Greedy Algorithm: Select the best immediate action at each step.
 
\end_layout

\begin_layout Itemize
Planning Graph Algorithm: Constructs a graph of potential actions and derives
 an optimal solution.
 
\end_layout

\begin_layout Itemize
Simulated Annealing: Iteratively refines a random solution to improve performanc
e.
 
\end_layout

\begin_layout Itemize
Reinforcement Learning: Learns an optimal policy through repeated interactions
 with the environment.
 
\end_layout

\begin_layout Standard
By exploring these diverse techniques, we aim to identify the most effective
 method for optimizing food inventory usage.
\begin_inset Newline newline
\end_inset

To ensure usability, we’ve developed a user-friendly graphical interface
 using Python's Tkinter library.
 Key components of the interface include: 
\end_layout

\begin_layout Itemize
A Home frame providing an overview and instructions.
 
\end_layout

\begin_layout Itemize
An Upload frame for managing product and inventory data.
 
\end_layout

\begin_layout Itemize
A Settings frame for configuring optimization parameters and selecting solvers.
 
\end_layout

\begin_layout Itemize
A Results frame displaying optimized meal plans, scores, and solver execution
 times.
 
\end_layout

\begin_layout Standard
This intuitive GUI enables users to interact with the AI system without
 requiring technical knowledge.
 Furthermore, our system’s flexible architecture allows for future enhancements,
 such as incorporating nutritional balance and dietary restriction constraints.
\end_layout

\begin_layout Standard
During this project we have used a number of LLM's for different use cases,
 Perplexity for finding previous work done in similar topics, and Claude
 for assistance with generating initial test data, edits to the report and
 solving bugs in the code.
\end_layout

\begin_layout Section
Previous Work
\end_layout

\begin_layout Standard
Several algorithms and approaches have been used to tackle the challenge
 of optimizing food inventory usage and meal planning.
 Linear programming has emerged as a particularly useful technique for solving
 these types of optimization problems.
 Linear programming was first applied to diet optimization in the 1940s
 by economist George Stigler, who tried to determine the minimum cost diet
 that would meet basic nutritional requirements 
\begin_inset CommandInset citation
LatexCommand cite
key "https://doi.org/10.1111/nbu.12076"
literal "false"

\end_inset

.
 While Stigler was unable to find an exact solution due to the complexity
 of the problem, mathematician George Dantzig later developed the simplex
 algorithm that made solving such linear programming problems feasible 
\begin_inset CommandInset citation
LatexCommand cite
key "https://doi.org/10.1111/nbu.12076"
literal "false"

\end_inset

.
 More recently, researchers have applied linear programming to develop nutrition
ally adequate, low-cost meal plans.
 For example, the USDA has used diet modeling since 1975 to generate balanced,
 affordable menus in its Thrifty Food Plan
\begin_inset CommandInset citation
LatexCommand cite
key "https://doi.org/10.1111/nbu.12076"
literal "false"

\end_inset

.
 Linear programming has also been used to design school lunch menus that
 reduce greenhouse gas emissions and water use 
\begin_inset CommandInset citation
LatexCommand cite
key "https://doi.org/10.1111/nbu.12076"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsection*
Common algorithms used include:
\end_layout

\begin_layout Itemize
Standard linear programming to minimize cost while meeting nutritional constrain
ts 
\begin_inset CommandInset citation
LatexCommand cite
key "https://doi.org/10.1111/nbu.12076"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
Individual diet modeling to translate nutrient recommendations into personalized
 food choices 
\begin_inset CommandInset citation
LatexCommand cite
key "10.1145/1719970.1720021"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\varepsilon$
\end_inset

-constraint method to analyze trade-offs between multiple objectives like
 cost and environmental impact 
\begin_inset CommandInset citation
LatexCommand cite
key "VANROOIJEN2024107559"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
These are classical algorithms that solve CSP's, but mostly lack the flexibility
 to expand the problem and allow different metrics to be added easily.
\end_layout

\begin_layout Subsection*
Current benchmarks focus on metrics like:
\end_layout

\begin_layout Itemize
Minimizing food waste (e.g.
 achieving 0 grams waste in optimized meal plans) 
\begin_inset CommandInset citation
LatexCommand cite
key "VANROOIJEN2024107559"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
Reducing greenhouse gas emissions (e.g.
 15-60% reduction compared to baseline diets) 
\begin_inset CommandInset citation
LatexCommand cite
key "VANROOIJEN2024107559"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
Lowering diet costs (e.g.
 25-30% cost reduction while maintaining nutrition) 
\begin_inset CommandInset citation
LatexCommand cite
key "https://doi.org/10.1111/nbu.12076"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
We are interested mainly in Minimizing food waste although using our algorithms
 it would be easy to optimize for all three benchmarks given the data for
 food items and recipes.
 
\end_layout

\begin_layout Subsection*
Common modeling assumptions include:
\end_layout

\begin_layout Itemize
Ignoring food preparation methods and treating all ingredients in a recipe
 equally
\begin_inset CommandInset citation
LatexCommand cite
key "VANROOIJEN2024107559"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
Assuming nutrients are evenly distributed within food categories 
\begin_inset CommandInset citation
LatexCommand cite
key "10.1145/1719970.1720021"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
Using average serving sizes and consumption patterns from dietary surveys
 
\begin_inset CommandInset citation
LatexCommand cite
key "https://doi.org/10.1111/nbu.12076"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
Allowing small deviations from exact nutritional requirements (e.g.
 10% flexibility) 
\begin_inset CommandInset citation
LatexCommand cite
key "VANROOIJEN2024107559"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
In the next section we discuss our assumptions made in order to model the
 problem in a way to gives us much flexibility, for both removing self imposed
 constraints, and relieving assumptions made.
\end_layout

\begin_layout Section
Methodology
\end_layout

\begin_layout Standard
We modeled our problem using our current 
\begin_inset Quotes eld
\end_inset

State
\begin_inset Quotes erd
\end_inset

 as the given food items we can use, their quantities, their expiry date
 and our current date.
 And a set of 
\begin_inset Quotes eld
\end_inset

Actions
\begin_inset Quotes erd
\end_inset

 defined by recipes, where we track the food items needed, the cooking time,
 the nutritional value and a rather subjective measure of tastefulness.
 This structure allows great flexibility both in adding fields to each food
 item (CO2 emmisions per gram etc.) and to recipes (analysis of nutritional
 values for making custom diets).
\end_layout

\begin_layout Subsection*
Algorithms
\end_layout

\begin_layout Standard
We used four different algorithms to solve the problem, each algorithm takes
 a different approach to find an optimal solution, starting with a naive
 greedy solution.
\end_layout

\begin_layout Subsubsection*
Greedy Solver
\end_layout

\begin_layout Standard
The Greedy Solver makes the best choice at each step without looking ahead.
 It works in the following manner:
\end_layout

\begin_layout Itemize
Checks available actions (meals that can be made with current ingredients)
 
\end_layout

\begin_layout Itemize
Picks the action with the highest score 
\end_layout

\begin_layout Itemize
Updates the state and repeats until the goal is reached or no more actions
 are possible
\end_layout

\begin_layout Subsubsection*
Planning Graph Solver
\end_layout

\begin_layout Standard
This solver builds a graph of possible actions and their outcomes from each
 state.
 It works in two main steps:
\end_layout

\begin_layout Itemize
Build the graph: Starting with the initial ingredients, it adds layers of
 possible meals and the resulting ingredient states.
 
\end_layout

\begin_layout Itemize
Extract the solution: It works backwards from the goal state, choosing the
 best meals at each step.
\end_layout

\begin_layout Subsubsection*
Reinforcement Learning Solver
\end_layout

\begin_layout Standard
This solver learns from repeated attempts to solve the problem.
 It uses Q-learning, a model free RL algorithm.
 The process includes:
\end_layout

\begin_layout Itemize
Randomly trying different actions and observing outcomes 
\end_layout

\begin_layout Itemize
Updating a "Q-table" that stores the expected value of each action in each
 state 
\end_layout

\begin_layout Itemize
Balancing exploration of new options with using known good choices (epsilon
 greedy)
\end_layout

\begin_layout Subsubsection*
Simulated Annealing Solver
\end_layout

\begin_layout Standard
A method used for solving CSP's, and is a take of the hill climber algorithm,
 This solver:
\end_layout

\begin_layout Itemize
Starts with a random solution 
\end_layout

\begin_layout Itemize
Makes small changes to the solution 
\end_layout

\begin_layout Itemize
Accepts improvements always and worse solutions sometimes, based on a "temperatu
re" that decreases over time
\end_layout

\begin_layout Subsection*
Assumptions and Success Criteria
\end_layout

\begin_layout Standard
Our algorithms are general solvers for the problem setup, thus we have created
 a number of different optimization goals for the general solution.
\end_layout

\begin_layout Subsubsection*
All solvers work towards two main goals:
\end_layout

\begin_layout Itemize
Minimize waste by using ingredients before they expire 
\end_layout

\begin_layout Itemize
Maximize or minimize chosen parameters: Shelf time, Taste rating, Number
 of steps, Preparation time and Number of products
\end_layout

\begin_layout Subsubsection*
Our system makes the following key assumptions:
\end_layout

\begin_layout Itemize
We have accurate data on ingredient expiration dates and nutritional values,
 without expiration date the model is useless since this is our main objective.
\end_layout

\begin_layout Itemize
Meal preparation time is not a constraint - it can be used as a parameter
 for optimizing upon, but is not defined in a way that we won't or will
 choose a recipe due to preparation time.
\end_layout

\begin_layout Itemize
We do not take into account shelf life for future planning of meals, meaning
 if a recipe has a shelf life of two weeks or one day won't change the meals
 chosen into the future.
\end_layout

\begin_layout Subsubsection*
Reward functions
\end_layout

\begin_layout Standard
Our project uses three problem setups as the infrastructure for solving
 our objectives, each problem setup is created with a different reward function.
 All problems have a final score which is the total sum of all action scores
 chosen along the way.
\end_layout

\begin_layout Enumerate
CountExpiredItemsProblem: This function scores meals based on the number
 of items that would expire if not used:
\begin_inset Formula 
\begin{eqnarray*}
\text{score} & = & \frac{1}{\text{expired count}+1}
\end{eqnarray*}

\end_inset

where expired count is the number of items that would expire by the next
 day if not used in the current meal.
 This is the most accurate metric for our problem definition, but as we
 can see, it is discrete in nature.
 There is no true relation between the number of expired items for one action
 on day 1 to the number of expired items per action for day 2.
\end_layout

\begin_layout Enumerate
MinimizeWasteProblem: This problem scores meals based on how soon their
 ingredients will expire.
 It calculates for each action the sum over each ingredient:
\begin_inset Formula 
\begin{eqnarray*}
\text{score} & =\frac{1}{\text{expired count}+1}+ & \sum\frac{1}{\text{expiration date}-\text{current date}+1}
\end{eqnarray*}

\end_inset

The main goal of this problem setup is to solve the issue with the previous
 setup, and give a sense of continuity to choices of actions over time.
 This problem can be thought of as a heuristic for the first problem, and
 we shall see why.
 We note that since a legal action is a recipe where all ingredients exist
 and are not expired the denominator is always positive.
\end_layout

\begin_layout Enumerate
ParametersProblem: This problem scores according to recipes parameters,
 trying to maximize or minimize chosen fields, this problem combined with
 MinimizeWasteProblem gives us a general problem that plays on the tradeoff
 between our parameters and the waste.
\end_layout

\begin_layout Claim
The MinimizeWasteProblem heuristic serves as an admissible heuristic for
 CountExpiredItemsProblem.
\end_layout

\begin_layout Proof
Since we are trying to minimize the cost in this problem, for admissibility
 we must show MinimizeWasteProblem is larger than CountExpiredItemsProblem
 for every action and state.
 But by definition it is defined as a sum of CountExpiredItemsProblem score,
 and a positive value.
\end_layout

\begin_layout Section
Results
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement htbp
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\family sans
A single column figure goes here
\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Captions go 
\emph on
under
\emph default
 the figure
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float table
placement htbp
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Table captions go 
\emph on
above
\emph default
 the table
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
delete
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
this
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
example
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
table
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Summary
\end_layout

\begin_layout Standard
.
\end_layout

\begin_layout Appendices

\end_layout

\begin_layout Section
First appendix
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "/Users/nadavlederman/Downloads/bibtex"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
